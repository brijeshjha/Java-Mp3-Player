
import AppPackage.AnimationClass;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jaudiotagger.audio.AudioFile;
import org.jaudiotagger.audio.AudioFileIO;
import org.jaudiotagger.audio.exceptions.CannotReadException;
import org.jaudiotagger.audio.exceptions.InvalidAudioFrameException;
import org.jaudiotagger.audio.exceptions.ReadOnlyFileException;
import org.jaudiotagger.tag.TagException;


public class mp3GUI extends javax.swing.JFrame {
    
    MainClass mc=new MainClass();
    int min=0,sec=0;
    static int dur=0;
    int i=0;
    static int gvar=0;
    String a="null_val";
    public String song="null_val";
    public String title_name="null_val";
    int l=0;
    playlist pobj = new playlist();
    int playvalue=0;
    int forwardcount=0;
    public int values=1;
    public int current=0;
    public int sleepVal=0;
    float v=0;
    public long valu=0;
    int timer=0;
    int timer2=0;
    
    AnimationClass ac=new AnimationClass();
    public int xMouse,yMouse,count=0;
    public int c=0;
    /**
     *
     */
    public int counter=0;
    private Object clip;

    public mp3GUI() {
        
        initComponents();
        animate();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        plabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        label3 = new javax.swing.JLabel();
        forward = new javax.swing.JLabel();
        backward = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        pauseLabel = new javax.swing.JLabel();
        addfileLabel = new javax.swing.JLabel();
        tlabel = new javax.swing.JLabel();
        slider = new javax.swing.JSlider();
        label1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MP3 PLAYER BY BRIJESH");
        setAlwaysOnTop(true);
        setMinimumSize(new java.awt.Dimension(599, 415));
        setUndecorated(true);
        setResizable(false);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        getContentPane().setLayout(null);

        plabel.setFont(new java.awt.Font("PMingLiU-ExtB", 0, 14)); // NOI18N
        plabel.setForeground(new java.awt.Color(153, 153, 153));
        plabel.setText(" View your playlist +");
        plabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        plabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                plabelMouseClicked(evt);
            }
        });
        getContentPane().add(plabel);
        plabel.setBounds(0, 25, 150, 20);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/close1.png"))); // NOI18N
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel4MouseEntered(evt);
            }
        });
        getContentPane().add(jLabel4);
        jLabel4.setBounds(580, 1, 20, 20);

        jLabel1.setFont(new java.awt.Font("Narkisim", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("  BRIDGE MUSIC PLAYER");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 2, 320, 20);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/min.png"))); // NOI18N
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel2);
        jLabel2.setBounds(555, 3, 20, 16);

        label3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/p1.png"))); // NOI18N
        label3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        label3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                label3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                label3MouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                label3MouseReleased(evt);
            }
        });
        getContentPane().add(label3);
        label3.setBounds(260, 250, 130, 110);

        forward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fw1.png"))); // NOI18N
        forward.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        forward.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                forwardMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                forwardMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                forwardMouseExited(evt);
            }
        });
        getContentPane().add(forward);
        forward.setBounds(150, 250, 100, 110);

        backward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bw1.png"))); // NOI18N
        backward.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backward.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backwardMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                backwardMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                backwardMouseExited(evt);
            }
        });
        getContentPane().add(backward);
        backward.setBounds(70, 270, 70, 70);

        title.setFont(new java.awt.Font("LCD", 1, 18)); // NOI18N
        getContentPane().add(title);
        title.setBounds(160, 20, 430, 30);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/title3.png"))); // NOI18N
        jLabel5.setText("jLabel5");
        jLabel5.setOpaque(true);
        getContentPane().add(jLabel5);
        jLabel5.setBounds(-10, -6, 660, 54);

        pauseLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pa1.png"))); // NOI18N
        pauseLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pauseLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pauseLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                pauseLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                pauseLabelMouseExited(evt);
            }
        });
        getContentPane().add(pauseLabel);
        pauseLabel.setBounds(380, 260, 100, 100);

        addfileLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ad1.png"))); // NOI18N
        addfileLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addfileLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addfileLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addfileLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addfileLabelMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addfileLabelMouseReleased(evt);
            }
        });
        getContentPane().add(addfileLabel);
        addfileLabel.setBounds(490, 270, 80, 80);

        tlabel.setForeground(new java.awt.Color(255, 255, 255));
        tlabel.setText("0:00");
        getContentPane().add(tlabel);
        tlabel.setBounds(520, 370, 50, 20);

        slider.setBackground(new java.awt.Color(51, 51, 51));
        slider.setForeground(new java.awt.Color(102, 255, 102));
        slider.setValue(0);
        slider.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        slider.setOpaque(false);
        getContentPane().add(slider);
        slider.setBounds(70, 370, 440, 20);

        label1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/original.jpg"))); // NOI18N
        getContentPane().add(label1);
        label1.setBounds(0, 0, 1100, 460);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        int x=evt.getXOnScreen();
        int y=evt.getYOnScreen();
        this.setLocation(x-xMouse, y-yMouse);
    }//GEN-LAST:event_formMouseDragged

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabel4MouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        
        xMouse=evt.getX();
        yMouse=evt.getY();
        
    }//GEN-LAST:event_formMousePressed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        this.setState(mp3GUI.ICONIFIED);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void label3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label3MouseEntered
        
        try{
        label3.setIcon(new ImageIcon(getClass().getResource("p2.png")));
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_label3MouseEntered

    private void label3MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label3MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_label3MouseReleased

    private void label3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label3MouseExited
        
     try{
        label3.setIcon(new ImageIcon(getClass().getResource("p1.png")));
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_label3MouseExited

    private void pauseLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pauseLabelMouseEntered
        pauseLabel.setIcon(new ImageIcon(getClass().getResource("pa2.png")));
    }//GEN-LAST:event_pauseLabelMouseEntered

    private void pauseLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pauseLabelMouseExited
        pauseLabel.setIcon(new ImageIcon(getClass().getResource("pa1.png")));
    }//GEN-LAST:event_pauseLabelMouseExited

    private void addfileLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addfileLabelMouseEntered
        addfileLabel.setIcon(new ImageIcon(getClass().getResource("ad2.png")));
    }//GEN-LAST:event_addfileLabelMouseEntered

    private void addfileLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addfileLabelMouseExited
        addfileLabel.setIcon(new ImageIcon(getClass().getResource("ad1.png")));
    }//GEN-LAST:event_addfileLabelMouseExited

    private void label3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label3MouseClicked
        
        if(a.compareTo("null_val")==0)
        {
            
        }
        else
        {
          if(pobj.playingplaylist==1)
          {
          mc.resume(song);
          a="null_val";
          title.setText(title_name);
          mc.pauseVal=0;
          l=1;
          
          //tpppppppppppppppppppp
          
          try {
               File file=new File(song);
                AudioFile audioFile = null;
                    try {
                        audioFile = AudioFileIO.read(file);
                    } catch (CannotReadException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (TagException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ReadOnlyFileException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InvalidAudioFrameException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                int durat= audioFile.getAudioHeader().getTrackLength();
                float abc=((float)durat/60);
				System.out.println("abc = "+abc);
                float r=abc*100;
				System.out.println(" r = "+r);
                int rem=(int)r%100;
				System.out.println(" rem = "+rem);
                int first=(durat/60);
                System.out.println("time = "+first+":"+rem);
                int ff=(first*60)+rem;
                System.out.println(" ff = "+ff);
                System.out.println("AWESOME time in milliseconds = "+durat)  ;
                dur=durat;    
                int songduration =mc.FIS.available();
                 int a=(int) TimeUnit.NANOSECONDS.convert(songduration, TimeUnit.SECONDS);
                
               // System.out.println("seconds = "+a);
                slider.setMaximum(durat);
                System.out.println("Song Duration = "+songduration);
            } catch (IOException ex) {
                Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
                new Thread()
                {
                    //int min=0;
                    //int sec=0;
                    public void run()
                    {//int i=0;
                        while(i<=dur && mc.pauseVal==0)
                        {
                        slider.setValue(i);
                         if(sec==60)
                         {
                          min++;
                          sec=0;
                          if(min<=9)
                          {
                              tlabel.setText("0"+min+":00");
                          }
                          else
                          {
                              tlabel.setText(min+":00");
                          }
                         }
                         else
                         {
                             if(sec<10)
                             {
                               tlabel.setText(min+":0"+sec);  
                             }
                             else
                             {
                             tlabel.setText(min+":"+sec);
                             }
                             sec++;
                         }
                            try {
                                Thread.sleep(1000);
                                i++;
                               // System.out.println("i = "+i);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if(i>=dur)
                        {
                            i=0;
                            min=0;
                            sec=0;
                        }
                    }
                    
                }.start();
                
                a="null_val";
                l=1;
                mc.pauseVal=0;
          
          }
          else
          {
            pobj.MC.resume(pobj.trackdest);
            a="null_val";
            title.setText(pobj.trackname);
            pobj.MC.pauseVal=0;
            l=1;
           // mc.pauseVal=0;
            
            try {
               File file=new File(song);
                AudioFile audioFile = null;
                    try {
                        audioFile = AudioFileIO.read(file);
                    } catch (CannotReadException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (TagException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ReadOnlyFileException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InvalidAudioFrameException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                int durat= audioFile.getAudioHeader().getTrackLength();
                float abc=((float)durat/60);
				System.out.println("abc = "+abc);
                float r=abc*100;
				System.out.println(" r = "+r);
                int rem=(int)r%100;
				System.out.println(" rem = "+rem);
                int first=(durat/60);
                System.out.println("time = "+first+":"+rem);
                int ff=(first*60)+rem;
                System.out.println(" ff = "+ff);
                System.out.println("AWESOME time in milliseconds = "+durat)  ;
                dur=durat;    
                int songduration =mc.FIS.available();
                 int a=(int) TimeUnit.NANOSECONDS.convert(songduration, TimeUnit.SECONDS);
                
               // System.out.println("seconds = "+a);
                slider.setMaximum(durat);
                System.out.println("Song Duration = "+songduration);
            } catch (IOException ex) {
                Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
                new Thread()
                {
                    //int min=0;
                    //int sec=0;
                    public void run()
                    {//int i=0;
                        while(i<=dur && mc.pauseVal==0)
                        {
                        slider.setValue(i);
                         if(sec==60)
                         {
                          min++;
                          sec=0;
                          if(min<=9)
                          {
                              tlabel.setText("0"+min+":00");
                          }
                          else
                          {
                              tlabel.setText(min+":00");
                          }
                         }
                         else
                         {
                             if(sec<10)
                             {
                               tlabel.setText(min+":0"+sec);  
                             }
                             else
                             {
                             tlabel.setText(min+":"+sec);
                             }
                             sec++;
                         }
                            try {
                                Thread.sleep(1000);
                                i++;
                               // System.out.println("i = "+i);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if(i>=dur)
                        {
                            i=0;
                            min=0;
                            sec=0;
                        }
                    }
                    
                }.start();
                
                a="null_val";
                l=1;
                mc.pauseVal=0;
          
          }
        }
    }//GEN-LAST:event_label3MouseClicked

    private void pauseLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pauseLabelMouseClicked
        
        if(pobj.playingplaylist==1)
        {
        mc.pause();
        a="some text";
        if(l==1)
        {
        title.setText("PAUSED...................");
        l=0;
        }
        }
        else
        {
          pobj.MC.pause();  
          a="some text";
        }
        
    }//GEN-LAST:event_pauseLabelMouseClicked

    private void addfileLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addfileLabelMouseClicked

        
    }//GEN-LAST:event_addfileLabelMouseClicked

    private void addfileLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addfileLabelMouseReleased

        FileFilter fff;
        fff = new FileNameExtensionFilter("Music Files","mp3","wav","wmv");
        JFileChooser chooser=new JFileChooser("E:\\eminem");
        
        chooser.addChoosableFileFilter(fff);
        int returnVal=chooser.showOpenDialog(label1);
        
        if(returnVal==JFileChooser.APPROVE_OPTION)
        { 
                pobj.MC.stop();
                mc.stop();
                pobj.playingplaylist=1;
                File myfile=chooser.getSelectedFile();
                song=myfile + "";
                System.out.println("SONG = "+song);
                title_name=myfile.getName();
                title.setText(title_name);
            
                
                mc.play(song);
            try {
               File file=new File(song);
                AudioFile audioFile = null;
                    try {
                        audioFile = AudioFileIO.read(file);
                    } catch (CannotReadException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (TagException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ReadOnlyFileException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InvalidAudioFrameException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                int durat= audioFile.getAudioHeader().getTrackLength();
                float abc=((float)durat/60);
				System.out.println("abc = "+abc);
                float r=abc*100;
				System.out.println(" r = "+r);
                int rem=(int)r%100;
				System.out.println(" rem = "+rem);
                int first=(durat/60);
                System.out.println("time = "+first+":"+rem);
                int ff=(first*60)+rem;
                System.out.println(" ff = "+ff);
                System.out.println("AWESOME time in milliseconds = "+durat)  ;
                dur=durat;    
                int songduration =mc.FIS.available();
                 int a=(int) TimeUnit.NANOSECONDS.convert(songduration, TimeUnit.SECONDS);
                
               // System.out.println("seconds = "+a);
                slider.setMaximum(durat);
                System.out.println("Song Duration = "+songduration);
            } catch (IOException ex) {
                Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
                new Thread()
                {
                    int min=0;
                    int sec=0;
                    public void run()
                    {//int i=0;
                        while(i<=dur && mc.pauseVal==0)
                        {
                        slider.setValue(i);
                         if(sec==60)
                         {
                          min++;
                          sec=0;
                          if(min<=9)
                          {
                              tlabel.setText("0"+min+":00");
                          }
                          else
                          {
                              tlabel.setText(min+":00");
                          }
                         }
                         else
                         {
                             if(sec<10)
                             {
                               tlabel.setText(min+":0"+sec);  
                             }
                             else
                             {
                             tlabel.setText(min+":"+sec);
                             }
                             sec++;
                         }
                            try {
                                Thread.sleep(1000);
                                i++;
                               // System.out.println("i = "+i);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if(i>=dur)
                        {
                            i=0;
                        }
                    }
                    
                }.start();
                
                a="null_val";
                l=1;
                mc.pauseVal=0;
                    
        }
        
        
        
        
    }//GEN-LAST:event_addfileLabelMouseReleased

    private void jLabel4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseEntered
        jLabel4.setBackground(Color.BLACK);
    }//GEN-LAST:event_jLabel4MouseEntered

    private void plabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_plabelMouseClicked
        pobj.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        pobj.setVisible(true);
        pobj.setSize(770,540);
    }//GEN-LAST:event_plabelMouseClicked

    private void forwardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forwardMouseClicked
       if(pobj.rowCount!=0)
       {
       pobj.playingplaylist=0;
       pobj.MC.pauseVal=0;
        mc.stop();
        pobj.MC.stop();
           try {
               pobj.startplaylist();
           } catch (InterruptedException ex) {
               Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
           }  
        title.setText(pobj.trackname);
        song=pobj.trackdest;
        
        
       //fdmhgklhgkhjpoglhpoglh
        
        try {
               File file=new File(song);
                AudioFile audioFile = null;
                    try {
                        audioFile = AudioFileIO.read(file);
                    } catch (CannotReadException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (TagException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ReadOnlyFileException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InvalidAudioFrameException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                int durat= audioFile.getAudioHeader().getTrackLength();
                float abc=((float)durat/60);
				System.out.println("abc = "+abc);
                float r=abc*100;
				System.out.println(" r = "+r);
                int rem=(int)r%100;
				System.out.println(" rem = "+rem);
                int first=(durat/60);
                System.out.println("time = "+first+":"+rem);
                int ff=(first*60)+rem;
                System.out.println(" ff = "+ff);
                System.out.println("AWESOME time in milliseconds = "+durat)  ;
                dur=durat;    
                int songduration =mc.FIS.available();
                 int a=(int) TimeUnit.NANOSECONDS.convert(songduration, TimeUnit.SECONDS);
                
               // System.out.println("seconds = "+a);
                slider.setMaximum(durat);
                System.out.println("Song Duration = "+songduration);
            } catch (IOException ex) {
                Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
                new Thread()
                {
                    int min=0;
                    int sec=0;
                    public void run()
                    {//int i=0;
                        while(i<=dur && mc.pauseVal==0)
                        {
                        slider.setValue(i);
                         if(sec==60)
                         {
                          min++;
                          sec=0;
                          if(min<=9)
                          {
                              tlabel.setText("0"+min+":00");
                          }
                          else
                          {
                              tlabel.setText(min+":00");
                          }
                         }
                         else
                         {
                             if(sec<10)
                             {
                               tlabel.setText(min+":0"+sec);  
                             }
                             else
                             {
                             tlabel.setText(min+":"+sec);
                             }
                             sec++;
                         }
                            try {
                                Thread.sleep(1000);
                                i++;
                               // System.out.println("i = "+i);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if(i>=dur)
                        {
                            i=0;
                        }
                    }
                    
                }.start();
                
                a="null_val";
                l=1;
                mc.pauseVal=0;
        
       }
    }//GEN-LAST:event_forwardMouseClicked

    private void forwardMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forwardMouseEntered
        
        forward.setIcon(new ImageIcon(getClass().getResource("fw2.png")));
        
    }//GEN-LAST:event_forwardMouseEntered

    private void forwardMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forwardMouseExited
        forward.setIcon(new ImageIcon(getClass().getResource("fw1.png")));
    }//GEN-LAST:event_forwardMouseExited

    private void backwardMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backwardMouseEntered
       backward.setIcon(new ImageIcon(getClass().getResource("bw2.png")));
    }//GEN-LAST:event_backwardMouseEntered

    private void backwardMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backwardMouseExited
       backward.setIcon(new ImageIcon(getClass().getResource("bw1.png")));
    }//GEN-LAST:event_backwardMouseExited

    private void backwardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backwardMouseClicked
       
       if(pobj.rowCount!=0)
       {
        pobj.playingplaylist=0;
        pobj.MC.pauseVal=0;
        mc.stop();
        pobj.MC.stop();
        pobj.backplay();
        title.setText(pobj.trackname);
        
        //dsgfdfghghgfhgfh
        try {
               File file=new File(song);
                AudioFile audioFile = null;
                    try {
                        audioFile = AudioFileIO.read(file);
                    } catch (CannotReadException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (TagException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ReadOnlyFileException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InvalidAudioFrameException ex) {
                        Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                int durat= audioFile.getAudioHeader().getTrackLength();
                float abc=((float)durat/60);
				System.out.println("abc = "+abc);
                float r=abc*100;
				System.out.println(" r = "+r);
                int rem=(int)r%100;
				System.out.println(" rem = "+rem);
                int first=(durat/60);
                System.out.println("time = "+first+":"+rem);
                int ff=(first*60)+rem;
                System.out.println(" ff = "+ff);
                System.out.println("AWESOME time in milliseconds = "+durat)  ;
                dur=durat;    
                int songduration =mc.FIS.available();
                 int a=(int) TimeUnit.NANOSECONDS.convert(songduration, TimeUnit.SECONDS);
                
               // System.out.println("seconds = "+a);
                slider.setMaximum(durat);
                System.out.println("Song Duration = "+songduration);
            } catch (IOException ex) {
                Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
                new Thread()
                {
                    int min=0;
                    int sec=0;
                    public void run()
                    {//int i=0;
                        while(i<=dur && mc.pauseVal==0)
                        {
                        slider.setValue(i);
                         if(sec==60)
                         {
                          min++;
                          sec=0;
                          if(min<=9)
                          {
                              tlabel.setText("0"+min+":00");
                          }
                          else
                          {
                              tlabel.setText(min+":00");
                          }
                         }
                         else
                         {
                             if(sec<10)
                             {
                               tlabel.setText(min+":0"+sec);  
                             }
                             else
                             {
                             tlabel.setText(min+":"+sec);
                             }
                             sec++;
                         }
                            try {
                                Thread.sleep(1000);
                                i++;
                               // System.out.println("i = "+i);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(mp3GUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if(i>=dur)
                        {
                            i=0;
                        }
                    }
                    
                }.start();
                
                a="null_val";
                l=1;
                mc.pauseVal=0;
        
       } 
    }//GEN-LAST:event_backwardMouseClicked

    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mp3GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mp3GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mp3GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mp3GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mp3GUI().setVisible(true);
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addfileLabel;
    private javax.swing.JLabel backward;
    private javax.swing.JLabel forward;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label3;
    private javax.swing.JLabel pauseLabel;
    private javax.swing.JLabel plabel;
    private javax.swing.JSlider slider;
    private javax.swing.JLabel title;
    private javax.swing.JLabel tlabel;
    // End of variables declaration//GEN-END:variables

    private void animate() {
        
        new Thread()
        {
            
            public void run()
            {
                int count=0;
                try
                {
                    
                    while(true)
                    {
                        switch(count)
                        {
                            case 0:
                                     ac.jLabelXLeft(0,-300,20,1,label1);
                                     count=1;
                                     break;
                            case 1: Thread.sleep(300);
                                     ac.jLabelXRight(-300,0,20,1,label1);
                                     count=0;
                                     break;
                        }
                    }
                    
                    
                }catch(Exception e)
                {
                    System.out.println("ERROR!"+e);
                }
            }
            
        }.start();
                
    }
}
